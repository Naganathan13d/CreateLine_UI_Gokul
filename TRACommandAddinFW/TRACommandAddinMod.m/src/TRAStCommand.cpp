// COPYRIGHT Dassault Systemes 2022
//===================================================================
//
// TRAStCommand.cpp
// The state chart based command: TRAStCommand
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2022  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "TRAStCommand.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
#include "CATDialogState.h"
#include "CATPathElementAgent.h"
#include "CATDialogAgent.h"
#include "CATStateCondition.h"
#include "CATDiaAction.h"
#include "CATBaseUnknown.h"
#include "CATISpecObject.h"
#include "CATIAlias.h"
#include "CATIGSMFactory.h"
#include "CATIGSMLinePtPt.h"
#include "CATFrmEditor.h"
#include "CATDocument.h"
#include "CATInit.h"
#include "CATIPrtContainer.h"
#include "CATIGSMProceduralView.h"
#include "CATIGSMPointCoord.h"
#include "CATDlgContextualMenu.h"

















CATCreateClass( TRAStCommand);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRAStCommand::TRAStCommand() :
  CATStateCommand ("TRAStCommand", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  , _pWindow(NULL) , _pPointAgent(NULL), pOKAgent(NULL), pCancelAgent(NULL), _pDlgAgentCtxtMenu(NULL)
{

	_pEditor = CATFrmEditor::GetCurrentEditor();
	if (NULL != _pEditor)
	{
		_HSO = _pEditor->GetHSO();
		_pISO = _pEditor->GetISO();
	}

	
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRAStCommand::~TRAStCommand()
{

	 if (_pPointAgent != NULL) 
	{
		_pPointAgent->RequestDelayedDestruction();
		_pPointAgent = NULL;

	}

	  if (_pDlgAgentCtxtMenu != NULL) 
	{
		_pDlgAgentCtxtMenu->RequestDelayedDestruction();
		_pDlgAgentCtxtMenu = NULL;

	}


	 if (NULL != _HSO && !_HSO->IsNull())
	{
		_HSO->Empty();
		_HSO = NULL;
	}
	
	



	if(_pWindow != NULL)
    {
    _pWindow->RequestDelayedDestruction();
    _pWindow = NULL;
    }
   
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TRAStCommand::BuildGraph()
{

	_pWindow = new TRACommandDlg();

	_pWindow->Build();

	_pWindow->SetVisibility(CATDlgShow);

	CATDialogState * pFirstPointSelectionState = GetInitialState("FirstPointSelection");
    CATDialogState * pSecondPointSelectionState = AddDialogState("SecondPointSelection");
	CATDialogState * pThirdPointSelectionState = AddDialogState("ThirdPointSelection");

	_pPointAgent = new CATPathElementAgent("FirstPointAgent");
   /* pSecondPointAgent = new CATPathElementAgent("SecondPointAgent");
	pThirdPointAgent = new CATPathElementAgent("ThirdPointAgent");*/

	_pPointAgent->AddElementType(IID_CATIGSMPoint);
   /* pSecondPointAgent->AddElementType(IID_CATIGSMPoint);
	pThirdPointAgent->AddElementType(IID_CATIGSMPoint);*/

	pOKAgent = new CATDialogAgent("OKAgent");
	pCancelAgent = new CATDialogAgent("CancelAgent");

	pPoint1SectorListAgent = new CATDialogAgent("Point1SectorListAgent");
    pPoint2SectorListAgent = new CATDialogAgent("Point2SectorListAgent");
	pPoint3SectorListAgent = new CATDialogAgent("Point3SectorListAgent");

	
	_pDlgAgentCtxtMenu = new CATDialogAgent("DlgAgentCtxtMenuClear");
	if (_pDlgAgentCtxtMenu)
	{
		CATDlgContextualMenu * pCtxMenuClear = _pWindow->GetCtxMenuClear();
		if (pCtxMenuClear)
		{
			_pDlgAgentCtxtMenu->AcceptOnNotify(pCtxMenuClear, pCtxMenuClear->GetVisibilityNotification());
		}
	}

	pOKAgent->AcceptOnNotify(_pWindow, _pWindow->GetDiaOKNotification());
    pCancelAgent->AcceptOnNotify(_pWindow, _pWindow->GetDiaCANCELNotification());
	pCancelAgent->AcceptOnNotify(_pWindow, _pWindow->GetWindCloseNotification());  

	pPoint1SectorListAgent->AcceptOnNotify(_pWindow->GetPoint1SelectorList(),_pWindow->GetPoint1SelectorList()->GetListSelectNotification());
    pPoint2SectorListAgent->AcceptOnNotify(_pWindow->GetPoint2SelectorList(),_pWindow->GetPoint2SelectorList()->GetListSelectNotification());
	pPoint3SectorListAgent->AcceptOnNotify(_pWindow->GetPoint3SelectorList(),_pWindow->GetPoint3SelectorList()->GetListSelectNotification());

	pFirstPointSelectionState->AddDialogAgent(_pPointAgent);
	pFirstPointSelectionState->AddDialogAgent(pCancelAgent);
	pFirstPointSelectionState->AddDialogAgent(pPoint1SectorListAgent);
    pFirstPointSelectionState->AddDialogAgent(pPoint2SectorListAgent);
	pFirstPointSelectionState->AddDialogAgent(pPoint3SectorListAgent);
	pFirstPointSelectionState->AddDialogAgent(_pDlgAgentCtxtMenu);

	pSecondPointSelectionState->AddDialogAgent(_pPointAgent);	
	pSecondPointSelectionState->AddDialogAgent(pCancelAgent);
	pSecondPointSelectionState->AddDialogAgent(pPoint1SectorListAgent);
    pSecondPointSelectionState->AddDialogAgent(pPoint2SectorListAgent);
	pSecondPointSelectionState->AddDialogAgent(pPoint3SectorListAgent);
	pSecondPointSelectionState->AddDialogAgent(_pDlgAgentCtxtMenu);

	pThirdPointSelectionState->AddDialogAgent(_pPointAgent);
	pThirdPointSelectionState->AddDialogAgent(pOKAgent);
	pThirdPointSelectionState->AddDialogAgent(pCancelAgent);
	pThirdPointSelectionState->AddDialogAgent(pPoint1SectorListAgent);
    pThirdPointSelectionState->AddDialogAgent(pPoint2SectorListAgent);
	pThirdPointSelectionState->AddDialogAgent(pPoint3SectorListAgent);
	pThirdPointSelectionState->AddDialogAgent(_pDlgAgentCtxtMenu);

	CATStateCondition * pFirstPointCondition = IsOutputSetCondition(pPoint1SectorListAgent);
    CATDiaAction * pFirstPointAction = Action ((ActionMethod) (&TRAStCommand::OnSelectorList1Selected)); 

	CATStateCondition * pSecondPointCondition = IsOutputSetCondition(pPoint2SectorListAgent);
    CATDiaAction * pSecondPointAction = Action ((ActionMethod) (&TRAStCommand::OnSelectorList2Selected));

	CATStateCondition * pThirdPointCondition = IsOutputSetCondition(pPoint3SectorListAgent);
    CATDiaAction * pThirdPointAction = Action ((ActionMethod) (&TRAStCommand::OnSelectorList3Selected));
	

    AddTransition( pFirstPointSelectionState, pFirstPointSelectionState, pFirstPointCondition, pFirstPointAction);
	AddTransition( pSecondPointSelectionState, pFirstPointSelectionState, pFirstPointCondition, pFirstPointAction);
	AddTransition( pThirdPointSelectionState, pFirstPointSelectionState, pFirstPointCondition, pFirstPointAction);	
	AddTransition( pFirstPointSelectionState, pFirstPointSelectionState, IsOutputSetCondition(_pDlgAgentCtxtMenu),Action((ActionMethod)&TRAStCommand::OnCtxMenuClear));	

    AddTransition( pSecondPointSelectionState, pSecondPointSelectionState, pSecondPointCondition, pSecondPointAction);
	AddTransition( pFirstPointSelectionState, pSecondPointSelectionState, pSecondPointCondition, pSecondPointAction);
    AddTransition( pThirdPointSelectionState, pSecondPointSelectionState, pSecondPointCondition, pSecondPointAction);	
	AddTransition( pSecondPointSelectionState, pSecondPointSelectionState, IsOutputSetCondition(_pDlgAgentCtxtMenu),Action((ActionMethod)&TRAStCommand::OnCtxMenuClear));	
   
    AddTransition( pThirdPointSelectionState, pThirdPointSelectionState, pThirdPointCondition, pThirdPointAction);	
	AddTransition( pSecondPointSelectionState, pThirdPointSelectionState, pThirdPointCondition, pThirdPointAction);	    	
    AddTransition( pFirstPointSelectionState, pThirdPointSelectionState, pThirdPointCondition, pThirdPointAction);
	AddTransition( pThirdPointSelectionState, pThirdPointSelectionState, IsOutputSetCondition(_pDlgAgentCtxtMenu),Action((ActionMethod)&TRAStCommand::OnCtxMenuClear));	


	 CATDiaAction * pPoint1SelectionAction = Action ((ActionMethod) (&TRAStCommand::SelectFirstPoint));
	 CATDiaAction * pPoint2SelectionAction = Action ((ActionMethod) (&TRAStCommand::SelectSecondPoint));
	 CATDiaAction * pPoint3SelectionAction = Action ((ActionMethod) (&TRAStCommand::SelectThirdPoint));

	 
    AddTransition( pFirstPointSelectionState, pFirstPointSelectionState, IsOutputSetCondition(_pPointAgent), pPoint1SelectionAction);
	AddTransition( pSecondPointSelectionState, pSecondPointSelectionState, IsOutputSetCondition(_pPointAgent), pPoint2SelectionAction);
	AddTransition( pThirdPointSelectionState, pThirdPointSelectionState, IsOutputSetCondition(_pPointAgent), pPoint3SelectionAction);




	CATStateCondition * pOKCondition = IsOutputSetCondition(pOKAgent);
    CATDiaAction * pOKAction = Action ((ActionMethod) (&TRAStCommand::OK));
    AddTransition( pThirdPointSelectionState, NULL, pOKCondition, pOKAction);


	CATStateCondition * pCancelCondition = IsOutputSetCondition(pCancelAgent);
    CATDiaAction * pCancelAction = Action ((ActionMethod) (&TRAStCommand::Exit));
    AddTransition( pFirstPointSelectionState, NULL, pCancelCondition, pCancelAction);
    AddTransition( pSecondPointSelectionState, NULL, pCancelCondition, pCancelAction);
	AddTransition( pThirdPointSelectionState, NULL, pCancelCondition, pCancelAction);


	AddAnalyseNotificationCB(_pWindow->GetPoint1SelectorList(),_pWindow->GetPoint1SelectorList()->GetListSelectNotification(), (CATCommandMethod)&TRAStCommand::FirstPointEditorIsSelected, "SelectorList1");
	AddAnalyseNotificationCB(_pWindow->GetPoint2SelectorList(),_pWindow->GetPoint2SelectorList()->GetListSelectNotification(), (CATCommandMethod)&TRAStCommand::SecondPointEditorIsSelected, "SelectorList2");
	AddAnalyseNotificationCB(_pWindow->GetPoint3SelectorList(),_pWindow->GetPoint3SelectorList()->GetListSelectNotification(), (CATCommandMethod)&TRAStCommand::ThirdPointEditorIsSelected, "SelectorList3");

	int TableRow = 0;
    _pWindow->GetPoint1SelectorList()->SetSelect( &TableRow, 1, 1);





  
}

CATBoolean TRAStCommand::Cancel()
{

	return TRUE;

}


CATBoolean TRAStCommand::OK()
{

	CreateLine();

	return TRUE;

}

CATBoolean TRAStCommand::Exit()

{	
    this->RequestDelayedDestruction();
    
    return TRUE;
}

CATBoolean TRAStCommand::OnCtxMenuClear()
{

	CATDlgContextualMenu * pCtxMenuClear = _pWindow->GetCtxMenuClear();
			if (pCtxMenuClear)
			{
				CATDlgPushItem * pBtnClr = new CATDlgPushItem(pCtxMenuClear, CATString("ClearSelection"));
				if (pBtnClr)
				{
					CATUnicodeString  usClearSelection = "ClearSelection";
					pBtnClr->SetTitle(usClearSelection);
					AddAnalyseNotificationCB(pBtnClr, pBtnClr->GetMenuIActivateNotification(), (CATCommandMethod)& TRAStCommand::OnCtxMenuClearSelection, "ClearSelection");
				}
			}

			_pDlgAgentCtxtMenu->InitializeAcquisition();
			return TRUE;

			

}

CATBoolean TRAStCommand::OnCtxMenuClearSelection()
{

	/*_pWindow->ClearSelectForPoint1SelectorList();
	_pWindow->ClearSelectForPoint2SelectorList();*/

	_pWindow->ClearSelectForPoint3SelectorListContextual();
	_pDlgAgentCtxtMenu->InitializeAcquisition();

	return TRUE;



}


CATBoolean TRAStCommand::FirstPointEditorIsSelected()
{
    _pWindow->ClearSelect("SelectorList1");
	
    
    return TRUE;
    //return TRUE;
}

CATBoolean TRAStCommand::SecondPointEditorIsSelected()
{
    _pWindow->ClearSelect("SelectorList2");
    
    return TRUE;
    //return TRUE;
}

CATBoolean TRAStCommand::ThirdPointEditorIsSelected()
{
    _pWindow->ClearSelect("SelectorList3");
    
    return TRUE;
    //return TRUE;
}

CATBoolean TRAStCommand::OnSelectorList1Selected(void *)
{
	
	 pPoint1SectorListAgent->InitializeAcquisition();

	return TRUE;
}
CATBoolean TRAStCommand::OnSelectorList2Selected(void *)
{
	
	 pPoint2SectorListAgent->InitializeAcquisition();

	return TRUE;
}
CATBoolean TRAStCommand::OnSelectorList3Selected(void *)
{
	
	 pPoint3SectorListAgent->InitializeAcquisition();

	return TRUE;
}

CATBoolean TRAStCommand::SelectFirstPoint()
{
	if(!!_pPointAgent)
   {

	   _pathElementPoint = _pPointAgent->GetValue();

	   if (NULL != _HSO && 0 == _HSO->IsMember(_pathElementPoint))
		{
			_HSO->Empty();
			_HSO->AddElement(_pathElementPoint);
		}
       
       CATBaseUnknown* pPointBaseUnknown = _pathElementPoint->CurrentElement();
       _pPointAgent->InitializeAcquisition();
	  

       CATISpecObject_var spPoint1 = pPointBaseUnknown;
       CATIAlias_var spAlias = pPointBaseUnknown;


       if(!!spAlias)
       {
          CATUnicodeString Name = spAlias->GetAlias();

          _pWindow->SetPoint1SelectorList(Name);

       }

       if(!!pPointBaseUnknown)
       {
           spFirstPoint = pPointBaseUnknown;
            if(!!spFirstPoint)
            {
                CATIGSMPointCoord * pPointCord = NULL;
                HRESULT HR1 = spFirstPoint->QueryInterface(IID_CATIGSMPointCoord, (void**)&pPointCord);
                if(!!pPointCord)
                {
                    return TRUE;   
                }

            }

       }
   }

   return FALSE;

    
}

CATBoolean TRAStCommand::SelectSecondPoint()

{
	if(!_pPointAgent)
		return FALSE;

	 _pathElementPoint = _pPointAgent->GetValue();

	   if (NULL != _HSO && 0 == _HSO->IsMember(_pathElementPoint))
		{
			_HSO->Empty();
			_HSO->AddElement(_pathElementPoint);
		}
       
       CATBaseUnknown* pPointBaseUnknown = _pathElementPoint->CurrentElement();

	

    _pPointAgent->InitializeAcquisition();
	


    CATIAlias_var spAlias = pPointBaseUnknown;
    if(!!spAlias)
    {  CATUnicodeString Name = spAlias->GetAlias();

       _pWindow->SetPoint2SelectorList(Name);

    }

	spSecondPoint = pPointBaseUnknown;
	if(!spSecondPoint)
		return FALSE;

	if(!!(spSecondPoint->IsEqual(spFirstPoint)))
	{
		return FALSE;
	}


  return TRUE;
}

CATBoolean TRAStCommand::SelectThirdPoint()

{
	if(!_pPointAgent)
		return FALSE;

	 _pathElementPoint = _pPointAgent->GetValue();

	   if (NULL != _HSO && 0 == _HSO->IsMember(_pathElementPoint))
		{
			_HSO->Empty();
			_HSO->AddElement(_pathElementPoint);
		}
       
       CATBaseUnknown* pPointBaseUnknown = _pathElementPoint->CurrentElement();

	

    _pPointAgent->InitializeAcquisition();
	

    CATIAlias_var spAlias = pPointBaseUnknown;
    if(!!spAlias)
    {  CATUnicodeString Name = spAlias->GetAlias();

       _pWindow->SetPoint3SelectorList(Name);

    }

	spThirdPoint = pPointBaseUnknown;
	if(!spThirdPoint)
		return FALSE;

	if(!!(spThirdPoint->IsEqual(spFirstPoint)))
	{
		return FALSE;
	}

	if(!!(spThirdPoint->IsEqual(spSecondPoint)))
	{
		return FALSE;
	}



  return TRUE;
}

void TRAStCommand::CreateLine()
{

	GetEditor();

	CATIGSMFactory_var spGSMFactory = spPrtContainer;

	CATIGSMLinePtPt_var spLine1 = spGSMFactory->CreateLine(spFirstPoint,spSecondPoint);
	CATISpecObject_var spLineObj1 = spLine1;
	InsertInProceduralView(spLineObj1);

	CATIGSMLinePtPt_var spLine2 = spGSMFactory->CreateLine(spSecondPoint,spThirdPoint);
	CATISpecObject_var spLineObj2 = spLine2;
	InsertInProceduralView(spLineObj2);

}

void TRAStCommand::GetEditor()

{

    CATFrmEditor *pEditor = NULL;

	pEditor = CATFrmEditor::GetCurrentEditor();

	CATDocument *pDocument = NULL;

	pDocument = pEditor->GetDocument();

	CATInit_var spInit = pDocument;

	CATBaseUnknown *pRootContainer = spInit->GetRootContainer("CATIPrtContainer"); 

    CATIPrtContainer *pPrtContainer = (CATIPrtContainer*)pRootContainer;

    spPrtContainer = pPrtContainer;


}

void TRAStCommand::InsertInProceduralView(CATISpecObject_var &ispSpecObject)
{
	CATTry
	{
		if(!ispSpecObject)
			return;
		CATIGSMProceduralView_var spGSMProcView = ispSpecObject;
		if(!!spGSMProcView)
		{
			spGSMProcView->InsertInProceduralView();
			ispSpecObject->Update();
		}
	}
	CATCatch(CATError, pError)
	{

	}
	CATEndTry;
}
